1.92202496529
<c_ast.Constant object at 0x7f1d750e69b0>
<c_ast.Constant object at 0x7f1d750e67d0>
<c_ast.Constant object at 0x7f1d750e6190>
<c_ast.Constant object at 0x7f1d750e6be0>
<c_ast.Constant object at 0x7f1d750e6960>
<c_ast.Constant object at 0x7f1d750e6b40>
<c_ast.Constant object at 0x7f1d750e6690>
<c_ast.Constant object at 0x7f1d750e60f0>
<c_ast.Constant object at 0x7f1d750e6460>
<c_ast.Constant object at 0x7f1d750e6a50>
<c_ast.Constant object at 0x7f1d750e65f0>
<c_ast.Constant object at 0x7f1d74dcfb40>
<c_ast.Constant object at 0x7f1d74dcf7d0>
<c_ast.Constant object at 0x7f1d74dcf960>
<c_ast.Constant object at 0x7f1d74dcf9b0>
<c_ast.Constant object at 0x7f1d74dcfdc0>
<c_ast.Constant object at 0x7f1d74dcffa0>
<c_ast.Constant object at 0x7f1d74dcfb90>
<c_ast.Constant object at 0x7f1d74dcf780>
<c_ast.Constant object at 0x7f1d74dcfc30>
<c_ast.Constant object at 0x7f1d74dcfaf0>
<c_ast.Constant object at 0x7f1d74dcfe10>
<c_ast.Constant object at 0x7f1d74dcfa00>
<c_ast.Constant object at 0x7f1d750a7050>
<c_ast.Constant object at 0x7f1d750a70f0>
<c_ast.Constant object at 0x7f1d750a7190>
<c_ast.Constant object at 0x7f1d750a7230>
<c_ast.Constant object at 0x7f1d750a72d0>
<c_ast.Constant object at 0x7f1d750a7370>
<c_ast.Constant object at 0x7f1d750a7410>
FileAST:  (at None)
  FuncDef:  (at :1)
    Decl: convert, [], [], [] (at :1)
      FuncDecl:  (at :1)
        ParamList:  (at :1)
          Decl: thousands, [], [], [] (at :1)
            TypeDecl: thousands, [] (at :1)
              IdentifierType: ['int'] (at :1)
          Decl: hundreds, [], [], [] (at :1)
            TypeDecl: hundreds, [] (at :1)
              IdentifierType: ['int'] (at :1)
          Decl: tens, [], [], [] (at :1)
            TypeDecl: tens, [] (at :1)
              IdentifierType: ['int'] (at :1)
          Decl: ones, [], [], [] (at :1)
            TypeDecl: ones, [] (at :1)
              IdentifierType: ['int'] (at :1)
        TypeDecl: convert, [] (at :1)
          IdentifierType: ['void'] (at :1)
    Compound:  (at :2)
      Decl: num, [], [], [] (at :3)
        ArrayDecl: [] (at :3)
          PtrDecl: [] (at :3)
            TypeDecl: num, [] (at :3)
              IdentifierType: ['char'] (at :3)
        InitList:  (at :3)
          Constant: string, "" (at :3)
          Constant: string, "One" (at :3)
          Constant: string, "Two" (at :3)
          Constant: string, "Three" (at :3)
          Constant: string, "Four" (at :3)
          Constant: string, "Five" (at :3)
          Constant: string, "Six" (at :3)
          Constant: string, "Seven" (at :4)
          Constant: string, "Eight" (at :4)
          Constant: string, "Nine" (at :4)
      Decl: for_ten, [], [], [] (at :6)
        ArrayDecl: [] (at :6)
          PtrDecl: [] (at :6)
            TypeDecl: for_ten, [] (at :6)
              IdentifierType: ['char'] (at :6)
        InitList:  (at :6)
          Constant: string, "" (at :6)
          Constant: string, "" (at :6)
          Constant: string, "Twenty" (at :6)
          Constant: string, "Thirty" (at :6)
          Constant: string, "Fourty" (at :6)
          Constant: string, "Fifty" (at :6)
          Constant: string, "Sixty" (at :6)
          Constant: string, "Seventy" (at :7)
          Constant: string, "Eighty" (at :7)
          Constant: string, "Ninty" (at :7)
      Decl: af_ten, [], [], [] (at :9)
        ArrayDecl: [] (at :9)
          PtrDecl: [] (at :9)
            TypeDecl: af_ten, [] (at :9)
              IdentifierType: ['char'] (at :9)
        InitList:  (at :9)
          Constant: string, "Ten" (at :9)
          Constant: string, "Eleven" (at :9)
          Constant: string, "Twelve" (at :9)
          Constant: string, "Thirteen" (at :9)
          Constant: string, "Fourteen" (at :9)
          Constant: string, "Fifteen" (at :10)
          Constant: string, "Sixteen" (at :10)
          Constant: string, "Seventeen" (at :10)
          Constant: string, "Eighteen" (at :10)
          Constant: string, "Ninteen" (at :10)
      FuncCall:  (at :12)
        ID: printf (at :12)
        ExprList:  (at :12)
          Constant: string, "\nThe year in words is:\n" (at :12)
      FuncCall:  (at :14)
        ID: printf (at :14)
        ExprList:  (at :14)
          Constant: string, "%s thousand" (at :14)
          ArrayRef:  (at :14)
            ID: num (at :14)
            ID: thousands (at :14)
      If:  (at :15)
        BinaryOp: != (at :15)
          ID: hundreds (at :15)
          Constant: int, 0 (at :15)
        FuncCall:  (at :16)
          ID: printf (at :16)
          ExprList:  (at :16)
            Constant: string, " %s hundred" (at :16)
            ArrayRef:  (at :16)
              ID: num (at :16)
              ID: hundreds (at :16)
      If:  (at :18)
        BinaryOp: != (at :18)
          ID: tens (at :18)
          Constant: int, 1 (at :18)
        FuncCall:  (at :19)
          ID: printf (at :19)
          ExprList:  (at :19)
            Constant: string, " %s %s" (at :19)
            ArrayRef:  (at :19)
              ID: for_ten (at :19)
              ID: tens (at :19)
            ArrayRef:  (at :19)
              ID: num (at :19)
              ID: ones (at :19)
        FuncCall:  (at :21)
          ID: printf (at :21)
          ExprList:  (at :21)
            Constant: string, " %s" (at :21)
            ArrayRef:  (at :21)
              ID: af_ten (at :21)
              ID: ones (at :21)
  FuncDef:  (at :25)
    Decl: main, [], [], [] (at :25)
      FuncDecl:  (at :25)
        TypeDecl: main, [] (at :25)
          IdentifierType: ['int'] (at :25)
    Compound:  (at :26)
      Decl: year, [], [], [] (at :27)
        TypeDecl: year, [] (at :27)
          IdentifierType: ['int'] (at :27)
      Decl: n1000, [], [], [] (at :28)
        TypeDecl: n1000, [] (at :28)
          IdentifierType: ['int'] (at :28)
      Decl: n100, [], [], [] (at :28)
        TypeDecl: n100, [] (at :28)
          IdentifierType: ['int'] (at :28)
      Decl: n10, [], [], [] (at :28)
        TypeDecl: n10, [] (at :28)
          IdentifierType: ['int'] (at :28)
      Decl: n1, [], [], [] (at :28)
        TypeDecl: n1, [] (at :28)
          IdentifierType: ['int'] (at :28)
      FuncCall:  (at :30)
        ID: printf (at :30)
        ExprList:  (at :30)
          Constant: string, "\nEnter the year (4 digits): " (at :30)
      FuncCall:  (at :31)
        ID: scanf (at :31)
        ExprList:  (at :31)
          Constant: string, "%d" (at :31)
          UnaryOp: & (at :31)
            ID: year (at :31)
      If:  (at :33)
        BinaryOp: || (at :33)
          BinaryOp: > (at :33)
            ID: year (at :33)
            Constant: int, 9999 (at :33)
          BinaryOp: < (at :33)
            ID: year (at :33)
            Constant: int, 1000 (at :33)
        Compound:  (at :34)
          FuncCall:  (at :35)
            ID: printf (at :35)
            ExprList:  (at :35)
              Constant: string, "\nError !! The year must contain 4 digits." (at :35)
          FuncCall:  (at :36)
            ID: exit (at :36)
            ExprList:  (at :36)
              ID: EXIT_FAILURE (at :36)
      Assignment: = (at :39)
        ID: n1000 (at :39)
        BinaryOp: / (at :39)
          ID: year (at :39)
          Constant: int, 1000 (at :39)
      Assignment: = (at :40)
        ID: n100 (at :40)
        BinaryOp: / (at :40)
          BinaryOp: % (at :40)
            ID: year (at :40)
            Constant: int, 1000 (at :40)
          Constant: int, 100 (at :40)
      Assignment: = (at :41)
        ID: n10 (at :41)
        BinaryOp: / (at :41)
          BinaryOp: % (at :41)
            ID: year (at :41)
            Constant: int, 100 (at :41)
          Constant: int, 10 (at :41)
      Assignment: = (at :42)
        ID: n1 (at :42)
        BinaryOp: % (at :42)
          BinaryOp: % (at :42)
            ID: year (at :42)
            Constant: int, 10 (at :42)
          Constant: int, 10 (at :42)
      FuncCall:  (at :44)
        ID: convert (at :44)
        ExprList:  (at :44)
          ID: n1000 (at :44)
          ID: n100 (at :44)
          ID: n10 (at :44)
          ID: n1 (at :44)
      Return:  (at :46)
        Constant: int, 0 (at :46)
